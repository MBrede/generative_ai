---
toc-title: '![](../imgs/function calling.png){width=240px}<br> <h3>Function Calling</h3>'
---

# Code Generation and Function Calling


## Motivation


Sometimes you want your AI assistant to answer more complex tasks then the LLM can handle out of the box. For example, you might want to ask questions regarding documents or datasets on your hard drive, or ask about recent events. This is a hard task for an LLM, because, if it was not trained on this information, i.e. the information wasn't part of its training data, it won't be able to answer these questions correctly. 

::: {.callout-note}
## üìù Task

Try it!

1. Open a notebook and connect to a local LLM using LM Studio.
2. Ask the LLM about the current weather in your location.

(I mean, sure, you could just look out the window, but we are developers here, we don't have windows!)

:::


To solve this problem, we need to give the LLM some tools it can use to access this additional information. This is where **function calling** comes into play. Function calling allows the LLM to call a function with specific parameters to get the required information. The function then returns the requested data or performs the necessary task, and the LLM can continue generating its response based on that information.

A basic workflow may look like this: 

1. The user inputs a question or task.
2. The LLM determines if it needs additional information or assistance from external tools.
3. If needed, the LLM calls a function with specific parameters to retrieve the required data or perform the necessary task. This means the LLM generates an answer containing either some executable code or a JSON object containing the name of the function and its parameters. These functions have to be defined in advance. 
4. The LLM response is then scanned for these elements (code or JSON object) and these are executed if possible.
5. The response is then fed back into the LLM (usually as user input) for further processing. 
6. The LLM uses the returned information to continue generating its response.




<!-- ## Code generation and function calling -->

The basic idea of function calling is to use an LLM to generate valid, executable code from the user input. That is, the user's input is sent to the LLM, together with a prompt, urging it to return structured output in a specific format. This output can then be taken and executed. For this to work properly, of course, the generated output *must* be valid code (in our case python code). There are two approaches for that:

1. **Code generation**: Here, we ask the LLM to generate a complete python script from the user input. This approach has the advantage of being simple and straightforward, but it can be prone to errors if the LLM does not fully understand the task at hand or if it makes mistakes in its code generation. It can also pose a severe security issue because this approach hinges on running generated code on your machine. 
2. **Function calling**: Here, we ask the LLM to generate a function call from the user input. This approach has the advantage of being more robust and accurate than code generation, as it is easier for the LLM to generate a correct function call than a complete python script. However, it requires that the functions that can be called are already defined and that they are properly documented.

Here, we will focus on function calling. Still the challenge is to get the LLM to generate valid output. There are two main strategies to facilitate that:

1. using a large, generalized LLM (e.g. GPT-4) with good prompt engineering and
2. using a smaller model fine tuned to generate function calls.

<!-- smolagents has code generation as default, historically (last year) it was still rubbish. Cover both this year. -->

## Function Calling

<!-- some smart sentences -->

### Function definition

The first step in using function calling is to define the functions that the LLM can call. This is done by providing a JSON schema that describes the name of the function, its arguments and their types. The JSON schema should be provided to the LLM in the system prompt. Here is an example: ^[Note, that this is not an executable implementation but just a description of the function for the LLM.]


    {
        "name": "get_current_weather",  
        "description": "Get the current weather in a given location",  
        "arguments": {    
            "location": {"type": "string"},    
            "unit": {"type": "string"}  
            } 
    }

### Prompting

The second step is to provide a good prompt. The prompt should make it clear to the LLM to only generate valid output and that it should follow the JSON schema. Here is an example of a prompt that can be used for function calling:

    You are a helpful assistant that generates function calls based on user input. Only use the functions you have been provided with.

    {function definition as described above}

    User: What's the weather like in Berlin?

    Assistant: {
        "name": "get_current_weather",
        "arguments": {"location": "Berlin", "unit": "celsius"}
    }

::: {.callout-note}
## üìù Task

Try it!

1. Open a notebook and connect to a local LLM using LM Studio.
2. Define the function `get_current_weather` as shown above.
3. Write a prompt that asks the LLM to generate a function call based on user input.
4. Test the prompt with an example input.
5. Define other functions and try other inputs and see if the LLM generates valid output.
6. Upload to Moodle.

:::

### Challenges, finetuned models and the influence of size

The main challenge is here to get the LLM to generate a valid answer. This is not always easy, as LLMs are not usually super safe coders üòÉ.

 - They can hallucinate functions or arguments that do not exist.
  - They can forget to call a function.
  - They can forget to provide all required arguments.
  - They can provide the wrong type for an argument.
  - They can provide invalid values for an argument.

There are several strategies to mitigate these issues:

1. **Prompt engineering**: A good prompt can help to guide the LLM towards generating valid output. This is especially true for larger models, as they have a better understanding of the world and can therefore generate more accurate responses.
2. **Finetuning**: Finetuning a model on a specific task can improve its performance on that task. This is especially useful for smaller models, as they are less likely to hallucinate functions or arguments that do not exist.
3. **Size**: Larger models are better at generating valid output than smaller models. However, larger models are also more expensive to run and require more computational resources.

::: {.callout-note}
## üìù Task

Test it! (we can do it together, if your hardware does not allow you to run the model.)

As above, but this time

<!--  update models -->

1. use a very small model (e.g [a small Llama model](https://huggingface.co/lmstudio-community/Llama-3.2-1B-Instruct-GGUF))
2. use a model finetuned for the task (you could try [this one](https://huggingface.co/bartowski/llama-3-8B-function-calling-GGUF))
3. a larger model ([a larger llama in this case](https://huggingface.co/lmstudio-community/Meta-Llama-3-8B-Instruct-GGUF))

:::

## Code Generation

<!-- smolagents as example (more on agents later), or not... Just try it using LLM call-->


<!-- 
## Agents recap

We introduced agents already back in chapter 3. To give a quick recap, an agent is a wrapper layer, that takes the user input and pipes it to an LLM, together with a custom system prompt, that allows the LLM to answer the user request better. The agent has several modules at its disposal, the memory, some tools and a planning tool. 

The memory function is what allows chat models to retain a memory of the past conversation with the user. This information is saved as plain text in the memory and given to the planning module (i.e. the LLM) along with the system prompt and the current user input. 

The planning module then decides which tools to use, if any, to answer the user request. The output of the planning module is a response message containing one or several tool calls (or a final answer). The agent then executes the tool calls by first parsing the response, then executing the functions. Based on the tool outputs, a final answer is generated and sent back to the user.


### React agents

There a several types of agent. Now, we want to fucus on the ReAct agent introduced by [@yaoReActSynergizingReasoning2023]. The ReAct agent is a type of agent that uses the ReAct framework to solve complex tasks by reasoning in multiple steps. It is based on the idea of "thought-action-observation" loops. The LLM is given a task and it generates a thought, which is then used to decide on an action. The action is executed and the observation is fed back into the LLM. This process is repeated until the LLM decides that it has enough information to answer the question or if the maximum number of iterations is reached.


### Llamaindex

LLamaindex is a framework that  makes it easy to implement and use agents. In Llamaindex an agent consists a an *agent runner* and an *agent_worker*. Think of the agent runner as the agent core in the architecture schematics and the agent worker as the planning module. The tools are functions implemented in python that can be executed by the agent worker. Finally, the memory module consists of a simple text buffer, logging the conversation history between the user and the agent and between the agent and the tools.


::: {.callout-note}
## üìù Task

Let's have a look!

1. Open a notebook and connect it with a local LLM using LM Studio.
2. Define a function that can be called by the agent to get the current weather in a given location. (Implement it this time, it doesn't need to work, just return random weather)
3. Initialize a ReAct agent using LLamaindex (you can use [this tutorial](https://docs.llamaindex.ai/en/stable/examples/agent/react_agent/) as the starting point)
<!-- (we will use [this example](https://docs.llamaindex.ai/en/stable/examples/agent/agent_runner/agent_runner/) as a starting point, since it reimplements the function calling agent and returns a step-by step breakdown of its thought process). -->
4. Have a look at the prompt, the agent gives to the LLM (you can find it using `agent.get_prompts()`)
5. Discuss the prompt with the group! What does it do? How does it do it?
6. Ask the agent to tell you the weather in a given location.
7. Watch in LM Studio how the LLM called by the agent creates the thought process, function calls and the final response.
8. Try to break the agent by asking stuff it cannot answer. Be creative. (On one occasion I just said "Hi" and it went into an infinite loop because it did not need a tool for that and there wasn't a "none" tool üòú.)
9. Upload to Moodle

:::


## Further Readings

On the Llamaindex website on the ["examples" page](https://docs.llamaindex.ai/en/stable/examples/) you will find a **lot** of helpful material: examples, notebooks, recipes and more. I recommend to have a look at them! For our case, check the "agents" section. For an even more in-depth dive, go to the "workflows" part.

- In [this example](https://docs.llamaindex.ai/en/stable/examples/agent/agent_runner/agent_runner/) you find an agent implementation that returns a step-by-step breakdown of its thought process.
- To go even more low level then that see [this example](https://docs.llamaindex.ai/en/stable/examples/workflow/function_calling_agent/) that will walk you through setting up a Workflow to construct a function calling agent from scratch.
- [Here](https://blog.dottxt.co/say-what-you-mean.html) is a *very* nice paper about generating structured output. 

 -->
## References